/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.voleshko.grocery.product.rest.v1.controller;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import ru.voleshko.grocery.product.rest.v1.dto.price.PriceDto;
import ru.voleshko.grocery.product.rest.v1.dto.product.ProductDto;
import ru.voleshko.grocery.product.rest.v1.dto.product.ProductSaveDto;

import java.util.List;
import java.util.UUID;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2021-01-09T16:36:59.377Z")

@Api(value = "product", description = "the product API")
@RequestMapping(value = "v1")
public interface ProductApi {

    @ApiOperation(value = "Delete Product by id", nickname = "productIdDelete", notes = "")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Product has been deleted") })
    @RequestMapping(value = "/product/{id}", method = RequestMethod.DELETE)
    void delete(@ApiParam(value = "Id of Product to be deleted",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Get prices over time range for Product", nickname = "productIdPriceGet", notes = "", response = PriceDto.class, responseContainer = "List")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Price has been created", response = PriceDto.class, responseContainer = "List") })
    @RequestMapping(value = "/product/{id}/price", method = RequestMethod.GET)
    ResponseEntity<List<PriceDto>> getPricesForTimeRange(@ApiParam(value = "Id of Product",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Update Product", nickname = "productIdPut", notes = "", response = ProductDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Product has been updated", response = ProductDto.class) })
    @RequestMapping(value = "/product/{id}", method = RequestMethod.PUT)
    ResponseEntity<ProductDto> update(@ApiParam(value = "Updated Product" ,required=true ) @RequestBody ProductSaveDto product, @ApiParam(value = "ID of Product being updated",required=true) @PathVariable("id") UUID id);


    @ApiOperation(value = "Create new Product", nickname = "productPost", notes = "", response = ProductSaveDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Product has been created", response = ProductSaveDto.class) })
    @RequestMapping(value = "/product", method = RequestMethod.POST)
    ResponseEntity<ProductDto> create(@ApiParam(value = "Product to be created" ,required=true ) @RequestBody ProductSaveDto product);

}
