/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.voleshko.grocery.product.rest.v1.controller;

import com.querydsl.core.types.Predicate;
import io.swagger.annotations.*;
import lombok.NonNull;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.querydsl.binding.QuerydslPredicate;
import org.springframework.data.web.SortDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import ru.voleshko.grocery.product.domain.model.Category;
import ru.voleshko.grocery.product.rest.common.PageDto;
import ru.voleshko.grocery.product.rest.v1.dto.category.CategoryDto;
import ru.voleshko.grocery.product.rest.v1.dto.category.CategorySaveDto;
import springfox.documentation.annotations.ApiIgnore;

import java.util.List;
import java.util.UUID;

@Api(value = "category", description = "the category API")
@RequestMapping(value = "v1")
public interface CategoryApi {

    @ApiOperation(value = "Find Categories by parameters")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Categories has been found") })
    @RequestMapping(value = "/category", method = RequestMethod.GET)
    ResponseEntity<PageDto<CategoryDto>> findAll(
            @QuerydslPredicate(root = Category.class) Predicate predicate,
            @ApiIgnore @SortDefault(sort = "name", direction = Sort.Direction.ASC) Pageable pageable
    );

    @ApiOperation(value = "Deletes attribute of the Category. The category must be a leaf value of hierarchy", nickname = "categoryAttributeDelete", notes = "")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Attribute successfully deleted out of the Category") })
    @RequestMapping(value = "/category/attribute", method = RequestMethod.DELETE)
    void deleteAttributeFromCategory(@NonNull @ApiParam(value = "ID of the Category", required = true) @RequestParam(value = "categoryId", required = true) UUID categoryId, @NonNull @ApiParam(value = "ID of the Attribute", required = true) @RequestParam(value = "attributeId", required = true) UUID attributeId);


    @ApiOperation(value = "Add attribute to the Category. The category must be a leaf value of hierarchy", nickname = "categoryAttributePost", notes = "")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Attribute successfully added to the Category") })
    @RequestMapping(value = "/category/attribute", method = RequestMethod.POST)
    void addAttributeToCategory(@NonNull @ApiParam(value = "ID of the Category", required = true) @RequestParam(value = "categoryId", required = true) UUID categoryId, @NonNull @ApiParam(value = "ID of the Attribute", required = true) @RequestParam(value = "attributeId", required = true) UUID attributeId);

    @ApiOperation(value = "Delete category by id", nickname = "categoryIdDelete", notes = "")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Category deleted"),
        @ApiResponse(code = 404, message = "No Category found") })
    @RequestMapping(value = "/category/{id}", method = RequestMethod.DELETE)
    void deleteById(@ApiParam(value = "ID of Category",required=true) @PathVariable("id") UUID id);

    @ApiOperation(value = "Find category by id", nickname = "categoryIdGet", notes = "", response = CategoryDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Category found", response = CategoryDto.class),
        @ApiResponse(code = 404, message = "No Category found") })
    @RequestMapping(value = "/category/{id}", method = RequestMethod.GET)
    ResponseEntity<CategoryDto> findById(@ApiParam(value = "ID of Category",required=true) @PathVariable("id") UUID id);

    @ApiOperation(value = "Update category", nickname = "categoryIdPut", notes = "", response = CategoryDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Category has been updated", response = CategoryDto.class) })
    @RequestMapping(value = "/category/{id}", method = RequestMethod.PUT)
    ResponseEntity<CategoryDto> update(@ApiParam(value = "Updated Category" ,required=true )  @RequestBody CategorySaveDto category, @ApiParam(value = "ID of Category being updated",required=true) @PathVariable("id") UUID id);

    @ApiOperation(value = "Create new category", nickname = "categoryPost", notes = "", response = CategoryDto.class)
    @ApiResponses(value = {
        @ApiResponse(code = 201, message = "Category has been created", response = CategoryDto.class) })
    @RequestMapping(value = "/category", method = RequestMethod.POST)
    ResponseEntity<CategoryDto> create(@ApiParam(value = "Category to be created" ,required=true )  @RequestBody CategorySaveDto category);

    @ApiOperation(value = "Get all sub-categories of specified parent Category. If parentId is not specified: all root Categories would be retrieved", nickname = "categorySubCategoriesGet", notes = "", response = CategoryDto.class, responseContainer = "List")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Sub-Categories of specified parent category", response = CategoryDto.class, responseContainer = "List") })
    @RequestMapping(value = "/category/sub-categories", method = RequestMethod.GET)
    ResponseEntity<List<CategoryDto>> getSubCategories(@ApiParam(value = "ID of parent Category") @RequestParam(value = "parentId", required = false) UUID parentId);

    @ApiOperation(value = "Get all root categories (which does not have parent category).", response = CategoryDto.class, responseContainer = "List")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Leaf categories", response = CategoryDto.class, responseContainer = "List") })
    @RequestMapping(value = "/category/root-categories", method = RequestMethod.GET)
    ResponseEntity<List<CategoryDto>> getRootCategories();

    @ApiOperation(value = "Get all leaf categories (which are not parent categories to any other category).", response = CategoryDto.class, responseContainer = "List")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Leaf categories", response = CategoryDto.class, responseContainer = "List") })
    @RequestMapping(value = "/category/leaf-categories", method = RequestMethod.GET)
    ResponseEntity<List<CategoryDto>> getLeafCategories();

}
